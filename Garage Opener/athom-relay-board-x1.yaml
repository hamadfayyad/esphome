substitutions:
  device_name: "athom-relay-board-x1"
  project_name: "Athom Technology.Relay-Board-X1"
  project_version: "1.0.1"
  friendly_name: "athom-relay-board-x1"
  relay_restore_mode: ALWAYS_OFF

esphome:
  name: athom-relay-board-x1
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true
  min_version: 2024.6.0
  project:
    name: "${project_name}"
    version: "${project_version}"


esp8266:
  board: esp8285
  restore_from_flash: true

preferences:
  flash_write_interval: 1min
# Enable logging
logger:

web_server:
  port: 80

# Enable Home Assistant API
api:

ota:
  - platform: esphome


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Athom-hotspot"
    password: "12345678"

captive_portal:
    
binary_sensor:
  - platform: status
    name: "Status"

  - platform: gpio
    pin:
      number: GPIO4
      mode: INPUT_PULLUP
      inverted: true
    name: "Garage Closed Reed Switch"
    id: closed_endstop
    filters:
      - delayed_on: 1000ms #Wait to stop moving (1000ms for mechanical, higher for magnetic - depending on magnet strength)
      - delayed_off: 1000ms #Wait to start moving (1000ms for mechanical, higher for magnetic - depending on magnet strength)
  - platform: gpio
    pin:
      number: GPIO14
      mode: INPUT_PULLUP
      inverted: true
    name: "Garage Open Reed Switch"
    id: open_endstop
    filters:
      - delayed_on: 1000ms #Wait to stop moving (1000ms for mechanical, higher for magnetic - depending on magnet strength)
      - delayed_off: 1000ms #Wait to start moving (1000ms for mechanical, higher for magnetic - depending on magnet strength)

sensor:
  - platform: uptime
    name: "Uptime Sensor"

  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s

globals:
  - id: performing_last_movement
    type: boolean
    restore_value: no
    initial_value: 'false'


button:
  - platform: factory_reset
    name: "factory Reset"
    id: Reset

  - platform: safe_mode
    name: "Safe Mode"
    internal: false



switch:
    # Relay
    # The switch that turns the UP direction on
  - platform: gpio
    pin: GPIO5
    id: garage_switch
    # If ESP reboots, do not attempt to restore switch state - Always initialize the switch as OFF on bootup.
    restore_mode: ALWAYS_OFF
    on_turn_on:
    - delay: 500ms
    - switch.turn_off: garage_switch

light:
  - platform: status_led
    name: "Status LED"
    disabled_by_default: true
    pin:
      inverted: true
      number: GPIO16

text_sensor:
  - platform: wifi_info
    ip_address:
      icon: "mdi:ip"
      name: Garage IP
    ssid:
      name: Garage SSID
      icon: "mdi:access-point-network"
    mac_address:
      name: "Mac Address"
      icon: "mdi:access-point-network"
     
time:
  - platform: sntp
    id: sntp_time

cover:
  - platform: template
    name: "Garage Door"
    id: garage_door
    device_class: garage
    assumed_state: true
    lambda: !lambda |-
      if (id(closed_endstop).state) //Door at closed endstop
      {
        if (id(garage_door).current_operation ==  esphome::cover::COVER_OPERATION_OPENING) //We should be opening
        {
          if (!id(performing_last_movement)) //Make sure we don't trigger this logic twice otherwise it will do unwanted things
          {
            delay(1000); //Wait for door to stop in case reed is triggered too early
            id(garage_switch).turn_on(); //Press button again
            id(performing_last_movement) = true; //Set flag to indicate we madeknow where the door is
          }
        }
        else if (id(garage_door).current_operation ==  esphome::cover::COVER_OPERATION_CLOSING)
        {
          //We should be closing so all is good
          id(performing_last_movement) = false;
          id(garage_door).current_operation =  esphome::cover::COVER_OPERATION_IDLE;
          id(garage_door).position = COVER_CLOSED;
          id(garage_door).publish_state();
          return COVER_CLOSED;
        }
        else
        {
          //No operation in progress, just send state
          id(performing_last_movement) = false;
          if (!id(garage_door).position == esphome::cover::COVER_CLOSED)
          {
            id(garage_door).position = COVER_CLOSED;
            id(garage_door).publish_state();
            return COVER_CLOSED;
          }
        }
      }
      else if (id(open_endstop).state) //Door at open endstop
      {
        if (id(garage_door).current_operation ==  esphome::cover::COVER_OPERATION_CLOSING) //We should be closing
        {
          if (!id(performing_last_movement))  //Make sure we don't trigger this logic twice otherwise it will do unwanted things
          {
            delay(1000);  //Wait for door to stop in case reed is triggered too early
            id(garage_switch).turn_on(); //Press button again
            id(performing_last_movement) = true; //Set flag to indicate we madeknow where the door is
          }
        }
        else if (id(garage_door).current_operation ==  esphome::cover::COVER_OPERATION_OPENING)
        {
          //We should be opening, so all is good
          id(performing_last_movement) = false;
          id(garage_door).current_operation =  esphome::cover::COVER_OPERATION_IDLE;
          id(garage_door).position = COVER_OPEN;
          id(garage_door).publish_state();
          return COVER_OPEN;
        }
        else //Door not at any endstop
        {
          //No operation in progress, just send state
          id(performing_last_movement) = false;
          if (id(garage_door).position != esphome::cover::COVER_OPEN)
          {
            id(garage_door).position = COVER_OPEN;
            id(garage_door).publish_state();
            return COVER_OPEN;
          }
        }
      }
      else
      {
        //The door is halfway open, so set it to OPEN
        if (id(garage_door).position != esphome::cover::COVER_OPEN)
          {
            id(garage_door).position = COVER_OPEN;
            id(garage_door).publish_state();
            return COVER_OPEN;
          }
      }
      return {};
      
    open_action: 
      - lambda: !lambda |-
          id(garage_door).current_operation =  esphome::cover::COVER_OPERATION_OPENING;
          if (!id(open_endstop).state) {
            id(garage_switch).turn_on();
            if (id(closed_endstop).state) {
              id(performing_last_movement) = true; //Set flag to indicate we know where the door is
            }
          }
    close_action:
      - lambda: !lambda |-
          id(garage_door).current_operation =  esphome::cover::COVER_OPERATION_CLOSING;
          if (!id(closed_endstop).state) {
            id(garage_switch).turn_on();
            if (id(open_endstop).state) {
              id(performing_last_movement) = true; //Set flag to indicate we know where the door is
            }
          }
    stop_action:
      - lambda: !lambda |-
          if (id(garage_door).current_operation ==  esphome::cover::COVER_OPERATION_CLOSING || id(garage_door).current_operation ==  esphome::cover::COVER_OPERATION_OPENING )
          {
            id(garage_door).current_operation =  esphome::cover::COVER_OPERATION_IDLE;
            //Stop the door if it is moving
            id(performing_last_movement) = false;
            id(garage_switch).turn_on();
          }
